name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  # Job 1: Code Quality and Tests
  test:
    name: Test Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, product-service, order-service, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.service != 'user-service' && matrix.service != 'product-service'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Setup Python
        if: matrix.service == 'user-service'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: services/${{ matrix.service }}/requirements.txt

      - name: Setup Go
        if: matrix.service == 'product-service'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: services/${{ matrix.service }}/go.sum

      - name: Install Node.js dependencies
        if: matrix.service != 'user-service' && matrix.service != 'product-service'
        working-directory: services/${{ matrix.service }}
        run: npm ci

      - name: Install Python dependencies
        if: matrix.service == 'user-service'
        working-directory: services/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Go dependencies
        if: matrix.service == 'product-service'
        working-directory: services/${{ matrix.service }}
        run: go mod download

      - name: Run Node.js tests
        if: matrix.service != 'user-service' && matrix.service != 'product-service'
        working-directory: services/${{ matrix.service }}
        run: npm test || echo "Tests not configured yet"

      - name: Run Python tests
        if: matrix.service == 'user-service'
        working-directory: services/${{ matrix.service }}
        run: pytest --cov=app --cov-report=xml || echo "Tests not configured yet"

      - name: Run Go tests
        if: matrix.service == 'product-service'
        working-directory: services/${{ matrix.service }}
        run: go test -v -coverprofile=coverage.out ./... || echo "Tests not configured yet"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./services/${{ matrix.service }}/coverage.*
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        service: [api-gateway, user-service, product-service, order-service, frontend]
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            GIT_BRANCH=${{ github.ref_name }}

  # Job 4: Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker compose version
          
      - name: Pull latest images
        run: |
          docker compose pull
          
      - name: Start services
        run: |
          docker compose up -d
          sleep 30  # Wait for services to be ready
          
      - name: Check service health
        run: |
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8081/health || exit 1
          curl -f http://localhost:3001/health || exit 1
          
      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # Add actual integration test commands
          
      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  # Job 5: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development environment
        run: |
          echo "Deploying to development environment..."
          # Add actual deployment commands here
          # kubectl apply -k infrastructure/kubernetes/overlays/development
          # or helm upgrade --install ...

  # Job 6: Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://prod.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here
          # kubectl apply -k infrastructure/kubernetes/overlays/production
          # or helm upgrade --install ...