name: CI/CD Pipeline

# Security: Limit GITHUB_TOKEN permissions to minimum required
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  checks: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # CODE QUALITY AND SECURITY
  # =============================================================================
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            services/frontend/package-lock.json
            services/api-gateway/package-lock.json
            services/order-service/package-lock.json
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: services/user-service/requirements.txt
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: services/product-service/go.sum
      
      # Frontend Quality Checks
      - name: Frontend - Install dependencies
        run: |
          cd services/frontend
          npm ci
      
      - name: Frontend - Lint and Format
        run: |
          cd services/frontend
          npm run lint
          npm run format:check
      
      - name: Frontend - Unit Tests
        run: |
          cd services/frontend
          npm run test:ci
      
      # API Gateway Quality Checks
      - name: API Gateway - Install dependencies
        run: |
          cd services/api-gateway
          npm ci
      
      - name: API Gateway - Tests
        run: |
          cd services/api-gateway
          npm run test
          npm run lint
      
      # User Service Quality Checks
      - name: User Service - Install dependencies
        run: |
          cd services/user-service
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: User Service - Tests
        run: |
          cd services/user-service
          python -m pytest --cov=app --cov-report=xml --cov-fail-under=80
          bandit -r app/
          black --check app/
          isort --check-only app/
      
      # Product Service Quality Checks
      - name: Product Service - Tests
        run: |
          cd services/product-service
          go test -v -race -coverprofile=coverage.out ./...
          go vet ./...
      
      # Order Service Quality Checks  
      - name: Order Service - Install dependencies
        run: |
          cd services/order-service
          npm ci
      
      - name: Order Service - Tests
        run: |
          cd services/order-service
          npm run test:cov
          npm run lint
      
      # Security Scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            r/owasp-top-ten
            r/security-audit
            r/secrets

  # =============================================================================
  # BUILD AND PACKAGE
  # =============================================================================
  build:
    needs: code-quality
    runs-on: ubuntu-latest
    name: Build and Package
    
    strategy:
      matrix:
        service: [frontend, api-gateway, user-service, product-service, order-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ github.sha }}
            GIT_BRANCH=${{ github.ref_name }}
      
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
      
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

  # =============================================================================
  # INTEGRATION TESTING
  # =============================================================================
  integration-test:
    needs: build
    runs-on: ubuntu-latest
    name: Integration Testing
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install test dependencies
        run: |
          npm install -g jest newman k6
          pip install requests pytest
      
      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30
      
      - name: Wait for services to be healthy
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
      
      - name: Run API integration tests
        run: |
          cd tests/integration
          npm install
          npm run test
      
      - name: Run contract tests
        run: |
          cd tests/contract
          npm install  
          npm run test
      
      - name: Performance smoke test
        run: |
          k6 run tests/performance/smoke-test.js
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # =============================================================================
  # END-TO-END TESTING
  # =============================================================================
  e2e-test:
    needs: integration-test
    runs-on: ubuntu-latest
    name: End-to-End Testing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install --with-deps
      
      - name: Start application
        run: |
          docker-compose up -d
          sleep 60
      
      - name: Run E2E tests
        run: |
          npx playwright test
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # =============================================================================
  # DEPLOYMENT (Development Environment)
  # =============================================================================
  deploy-dev:
    needs: [build, integration-test]
    runs-on: ubuntu-latest
    name: Deploy to Development
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://microservices-dev.example.com
    
    steps:
      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/microservices-config
          token: ${{ secrets.CONFIG_REPO_TOKEN }}
          path: config-repo
      
      - name: Update development configuration
        run: |
          cd config-repo
          yq eval '.image.tag = "${{ github.sha }}"' -i environments/development/values.yaml
          
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add environments/development/values.yaml
          git commit -m "Deploy ${{ github.sha }} to development"
          git push
      
      - name: Wait for ArgoCD sync
        run: |
          sleep 60
          echo "Deployment to development initiated"

  # =============================================================================
  # DEPLOYMENT (Staging Environment) 
  # =============================================================================
  deploy-staging:
    needs: [build, integration-test, e2e-test]
    runs-on: ubuntu-latest
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://microservices-staging.example.com
    
    steps:
      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/microservices-config
          token: ${{ secrets.CONFIG_REPO_TOKEN }}
          path: config-repo
      
      - name: Update staging configuration
        run: |
          cd config-repo
          yq eval '.image.tag = "${{ github.sha }}"' -i environments/staging/values.yaml
          
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add environments/staging/values.yaml
          git commit -m "Deploy ${{ github.sha }} to staging"
          git push
      
      - name: Run staging tests
        run: |
          sleep 120  # Wait for deployment
          curl -f https://microservices-staging.example.com/health
          k6 run tests/performance/staging-load-test.js

  # =============================================================================
  # PRODUCTION DEPLOYMENT (Manual Approval Required)
  # =============================================================================
  deploy-prod:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://microservices.example.com
    
    steps:
      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/microservices-config
          token: ${{ secrets.CONFIG_REPO_TOKEN }}
          path: config-repo
      
      - name: Deploy canary to production
        run: |
          cd config-repo
          yq eval '.canary.image.tag = "${{ github.sha }}"' -i environments/production/canary.yaml
          
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add environments/production/canary.yaml
          git commit -m "Deploy canary ${{ github.sha }} to production"
          git push
      
      - name: Monitor canary deployment
        run: |
          # This would typically integrate with Flagger or similar
          echo "Monitoring canary deployment for 10 minutes"
          sleep 600
          
          # Check canary metrics (placeholder)
          echo "Canary deployment successful"
      
      - name: Promote to full production
        run: |
          cd config-repo
          yq eval '.image.tag = "${{ github.sha }}"' -i environments/production/values.yaml
          
          git add environments/production/values.yaml
          git commit -m "Promote ${{ github.sha }} to full production"
          git push

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    name: Send Notifications
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `Deployment ${{ job.status }}: ${process.env.AS_COMMIT} to production\nCommit: ${process.env.AS_MESSAGE}\nAuthor: ${process.env.AS_AUTHOR}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
      
      - name: Update deployment status
        run: |
          echo "Deployment completed with status: ${{ job.status }}"
          # This could update a dashboard or monitoring system

# =============================================================================
# WORKFLOW SECURITY AND BEST PRACTICES
# =============================================================================