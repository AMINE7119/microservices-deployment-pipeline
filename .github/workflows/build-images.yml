name: Build and Push Container Images

on:
  push:
    branches: [ main, develop, 'feature/*' ]
    paths:
      - 'services/**'
      - '.github/workflows/build-images.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository_owner }}/microservices-pipeline

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  # =============================================================================
  # BUILD MATRIX STRATEGY
  # =============================================================================
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, api-gateway, user-service, product-service, order-service]
        include:
          - service: frontend
            context: ./services/frontend
            dockerfile: ./services/frontend/Dockerfile
          - service: api-gateway
            context: ./services/api-gateway
            dockerfile: ./services/api-gateway/Dockerfile
          - service: user-service
            context: ./services/user-service
            dockerfile: ./services/user-service/Dockerfile
          - service: product-service
            context: ./services/product-service
            dockerfile: ./services/product-service/Dockerfile
          - service: order-service
            context: ./services/order-service
            dockerfile: ./services/order-service/Dockerfile

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-{{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=dev-latest,enable=${{ github.ref == 'refs/heads/develop' }}
          type=raw,value=stable,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        labels: |
          org.opencontainers.image.title=${{ matrix.service }}
          org.opencontainers.image.description=Microservices Pipeline - ${{ matrix.service }}
          org.opencontainers.image.vendor=Microservices Pipeline
          org.opencontainers.image.version=${{ github.sha }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'

    - name: Generate image summary
      run: |
        echo "## üê≥ Container Image Built: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
        echo "**Registry**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "**Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # UPDATE KUBERNETES MANIFESTS
  # =============================================================================
  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update image tags in Kubernetes manifests
      run: |
        # Determine the tag based on branch
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          TAG="stable"
          ENVIRONMENT="production"
        elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          TAG="dev-latest"
          ENVIRONMENT="development"
        else
          TAG="${{ github.sha }}"
          ENVIRONMENT="development"
        fi

        echo "Updating manifests with tag: $TAG for environment: $ENVIRONMENT"

        # Update Kustomization files
        for service in frontend api-gateway user-service product-service order-service; do
          # Update development overlay
          sed -i "s|newTag: dev-latest|newTag: $TAG|g" kubernetes/overlays/development/kustomization.yaml
          
          # Update production overlay if main branch
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            sed -i "s|newTag: stable|newTag: $TAG|g" kubernetes/overlays/production/kustomization.yaml
          fi
        done

        # Update base deployment files with registry path
        for service in frontend api-gateway user-service product-service order-service; do
          sed -i "s|image: ghcr.io/microservices-pipeline/$service:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-$service:$TAG|g" kubernetes/base/$service/deployment.yaml
        done

    - name: Commit manifest updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git add kubernetes/
        git commit -m "chore: Update container image tags to ${{ github.sha }}"
        git push

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  notify-success:
    needs: [build-and-push, update-manifests]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Notify build success
      run: |
        echo "‚úÖ All container images built successfully!"
        echo "üöÄ Images available at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-*"
        echo "üì¶ Total services built: 5"
        echo "üè∑Ô∏è Tag: ${{ github.ref == 'refs/heads/main' && 'stable' || 'dev-latest' }}"