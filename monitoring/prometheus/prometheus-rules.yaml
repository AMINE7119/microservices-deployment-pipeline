apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: monitoring
data:
  alerting-rules.yml: |
    groups:
    - name: microservices.rules
      interval: 30s
      rules:
      # Service Availability Alerts
      - alert: ServiceDown
        expr: up{job="microservices"} == 0
        for: 2m
        labels:
          severity: critical
          team: platform
        annotations:
          summary: "Service {{ $labels.kubernetes_name }} is down"
          description: "{{ $labels.kubernetes_name }} in namespace {{ $labels.kubernetes_namespace }} has been down for more than 2 minutes."

      # High Error Rate
      - alert: HighErrorRate
        expr: |
          (
            sum(rate(http_requests_total{status=~"5.."}[5m])) by (service)
            /
            sum(rate(http_requests_total[5m])) by (service)
          ) > 0.01
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High error rate for {{ $labels.service }}"
          description: "Service {{ $labels.service }} has error rate above 1% (current: {{ $value | humanizePercentage }})"

      # High Latency
      - alert: HighLatency
        expr: |
          histogram_quantile(0.95,
            sum(rate(http_request_duration_seconds_bucket[5m])) by (service, le)
          ) > 0.5
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High latency for {{ $labels.service }}"
          description: "95th percentile latency for {{ $labels.service }} is above 500ms (current: {{ $value | humanizeDuration }})"

      # Pod Memory Usage
      - alert: HighMemoryUsage
        expr: |
          (
            container_memory_usage_bytes{pod!="", container!="POD"}
            / 
            container_spec_memory_limit_bytes{pod!="", container!="POD"}
          ) > 0.8
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High memory usage for pod {{ $labels.pod }}"
          description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is using more than 80% of memory limit (current: {{ $value | humanizePercentage }})"

      # Pod CPU Usage
      - alert: HighCPUUsage
        expr: |
          (
            sum(rate(container_cpu_usage_seconds_total{pod!="", container!="POD"}[5m])) by (pod, namespace)
            /
            sum(container_spec_cpu_quota{pod!="", container!="POD"} / container_spec_cpu_period{pod!="", container!="POD"}) by (pod, namespace)
          ) > 0.8
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High CPU usage for pod {{ $labels.pod }}"
          description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is using more than 80% of CPU limit (current: {{ $value | humanizePercentage }})"

      # Pod Restart Rate
      - alert: HighPodRestartRate
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0.1
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High restart rate for {{ $labels.pod }}"
          description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} has restarted {{ $value }} times in the last 15 minutes"

      # SLO Violations
      - alert: SLOViolation_Availability
        expr: |
          (
            1 - (
              sum(rate(http_requests_total{status!~"5.."}[5m])) by (service)
              /
              sum(rate(http_requests_total[5m])) by (service)
            )
          ) < 0.999
        for: 5m
        labels:
          severity: critical
          team: platform
          slo: availability
        annotations:
          summary: "SLO violation: Availability below 99.9% for {{ $labels.service }}"
          description: "Service {{ $labels.service }} availability is {{ $value | humanizePercentage }}, below SLO target of 99.9%"

      # Database Connection Pool
      - alert: DatabaseConnectionPoolExhausted
        expr: |
          (
            pg_stat_database_numbackends{datname!~"template.*|postgres"}
            /
            pg_settings_max_connections
          ) > 0.8
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "Database connection pool nearly exhausted"
          description: "Database {{ $labels.datname }} is using {{ $value | humanizePercentage }} of available connections"

  recording-rules.yml: |
    groups:
    - name: microservices.recording
      interval: 15s
      rules:
      # Request rate
      - record: service:http_requests:rate5m
        expr: |
          sum(rate(http_requests_total[5m])) by (service, method, status)

      # Error rate
      - record: service:http_requests:error_rate5m
        expr: |
          sum(rate(http_requests_total{status=~"5.."}[5m])) by (service)
          /
          sum(rate(http_requests_total[5m])) by (service)

      # P95 latency
      - record: service:http_request_duration:p95_5m
        expr: |
          histogram_quantile(0.95,
            sum(rate(http_request_duration_seconds_bucket[5m])) by (service, le)
          )

      # P99 latency
      - record: service:http_request_duration:p99_5m
        expr: |
          histogram_quantile(0.99,
            sum(rate(http_request_duration_seconds_bucket[5m])) by (service, le)
          )

      # Service availability
      - record: service:availability:5m
        expr: |
          1 - (
            sum(rate(http_requests_total{status=~"5.."}[5m])) by (service)
            /
            sum(rate(http_requests_total[5m])) by (service)
          )