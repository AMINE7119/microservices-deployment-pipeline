version: '3.8'

services:
  # Frontend Service (Secure)
  frontend:
    image: frontend:secure
    container_name: frontend-secure
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      API_GATEWAY_URL: http://api-gateway:8080
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); });"]
      interval: 30s
      timeout: 3s
      retries: 3

  # API Gateway (Secure)
  api-gateway:
    image: api-gateway:secure
    container_name: api-gateway-secure
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: production
      USER_SERVICE_URL: http://user-service:8000
      PRODUCT_SERVICE_URL: http://product-service:8081
      ORDER_SERVICE_URL: http://order-service:3001
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); });"]
      interval: 30s
      timeout: 3s
      retries: 3

  # User Service (Secure)
  user-service:
    image: user-service:secure
    container_name: user-service-secure
    ports:
      - "8000:8000"
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/users
      REDIS_URL: redis://redis:6379
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 3s
      retries: 3
    depends_on:
      - postgres
      - redis

  # Product Service (Secure)
  product-service:
    image: product-service:secure
    container_name: product-service-secure
    ports:
      - "8081:8081"
    environment:
      PORT: "8081"
      MONGODB_URI: mongodb://mongodb:27017/products
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "/product-service", "-health"]
      interval: 30s
      timeout: 3s
      retries: 3
    depends_on:
      - mongodb

  # Order Service (Secure)
  order-service:
    image: order-service:secure
    container_name: order-service-secure
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/orders
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); });"]
      interval: 30s
      timeout: 3s
      retries: 3
    depends_on:
      - postgres
      - rabbitmq

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-secure
    environment:
      POSTGRES_DB: microservices
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: mongodb-secure
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: microservices
    volumes:
      - mongodb-data:/data/db
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-secure
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq-secure
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HashiCorp Vault for Secrets Management
  vault:
    image: hashicorp/vault:1.15
    container_name: vault-secure
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault-data:/vault/data
      - ./security/vault:/vault/config
    networks:
      - microservices-network
    security_opt:
      - no-new-privileges:true
    command: server -dev
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  microservices-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-microservices
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

volumes:
  postgres-data:
  mongodb-data:
  redis-data:
  rabbitmq-data:
  vault-data: